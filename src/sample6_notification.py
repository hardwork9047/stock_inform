import os
import schedule
import time
import yfinance as yf
from pandas_datareader import data as pdr
import matplotlib.pyplot as plt
import datetime
import utility.line as line
import utility.calculate as cl


def job():
    # „ÉÜ„Çπ„É©„ÅÆÊ†™Âºè„Ç≥„Éº„Éâ
    ticker = "TSLA"

    # ÈÅéÂéª1Âπ¥Èñì„ÅÆ„Éá„Éº„Çø„ÇíÂèñÂæó
    end = datetime.datetime.now()
    start = end - datetime.timedelta(days=365)

    # yfinance„Çí‰ΩøÁî®„Åó„Å¶„Éá„Éº„Çø„ÇíÂèñÂæó
    yf.pdr_override()
    df = pdr.get_data_yahoo(ticker, start, end)

    # ÁßªÂãïÂπ≥ÂùáÁ∑ö„ÅÆË®àÁÆó
    df["MA10"] = df["Adj Close"].rolling(window=10).mean()
    df["MA50"] = df["Adj Close"].rolling(window=50).mean()
    df["MA200"] = df["Adj Close"].rolling(window=200).mean()

    df.to_csv(ticker + "_daily_data.csv", encoding="utf8")
    df["MA10"].to_csv(ticker + "_daily_data_MA10.csv", encoding="utf8")
    df["MA50"].to_csv(ticker + "_daily_data_MA50.csv", encoding="utf8")
    df["MA200"].to_csv(ticker + "_daily_data_MA200.csv", encoding="utf8")

    # ÁßªÂãïÂπ≥ÂùáÁ∑ö„ÅÆÂÇæ„Åç„ÅÆË®àÁÆó
    df["MA10_slope"] = cl.fourth_order_diff(df["MA10"])  # MA10„ÅÆÂÇæ„Åç
    df["MA50_slope"] = cl.fourth_order_diff(df["MA50"])  # MA50„ÅÆÂÇæ„Åç
    df["MA200_slope"] = cl.fourth_order_diff(df["MA200"])  # MA200„ÅÆÂÇæ„Åç
    df["MA10_slope"].to_csv(ticker + "_daily_data_MA10_slope.csv", encoding="utf8")
    df["MA50_slope"].to_csv(ticker + "_daily_data_MA50_slope.csv", encoding="utf8")
    df["MA200_slope"].to_csv(ticker + "_daily_data_MA200_slope.csv", encoding="utf8")

    # ÊúÄÊñ∞„ÅÆÂÇæ„Åç„ÇíÂèñÂæó
    latest_MA10_slope = df["MA10_slope"].dropna().iloc[-1]
    latest_MA50_slope = df["MA50_slope"].dropna().iloc[-1]
    latest_MA200_slope = df["MA200_slope"].dropna().iloc[-1]

    print(f"MA10 slope: {latest_MA10_slope}")
    print(f"MA50 slope: {latest_MA50_slope}")
    print(f"MA200 slope: {latest_MA200_slope}")

    # „Éó„É≠„ÉÉ„Éà„ÅÆÊ∫ñÂÇô
    fig, ax1 = plt.subplots(figsize=(12, 6))

    # Ê†™‰æ°„ÅÆ„Éó„É≠„ÉÉ„ÉàÔºàÁ¨¨‰∏ÄyËª∏Ôºâ
    ax1.plot(df["Adj Close"], label="TSLA", color="blue")
    ax1.set_xlabel("Date")
    ax1.set_ylabel("Adj Close", color="blue")
    ax1.tick_params(axis="y", labelcolor="blue")

    # ÁßªÂãïÂπ≥ÂùáÁ∑ö„ÅÆ„Éó„É≠„ÉÉ„ÉàÔºàÁ¨¨‰∏ÄyËª∏Ôºâ
    ax1.plot(df["MA10"], label="10-move-ave.", linestyle="--", color="lightgreen")
    ax1.plot(df["MA50"], label="50-move-ave.", linestyle="--", color="green")
    ax1.plot(df["MA200"], label="200-move-ave.", linestyle="--", color="darkgreen")

    # Á¨¨‰∫åyËª∏„ÅÆ‰ΩúÊàê
    ax2 = ax1.twinx()

    # ÂÇæ„Åç„ÅÆ„Éó„É≠„ÉÉ„ÉàÔºàÁ¨¨‰∫åyËª∏Ôºâ
    ax2.plot(df["MA10_slope"], label="MA10 Slope", linestyle=":", color="lightgreen")
    ax2.plot(df["MA50_slope"], label="MA50 Slope", linestyle=":", color="green")
    ax2.plot(df["MA200_slope"], label="MA200 Slope", linestyle=":", color="darkgreen")
    ax2.set_ylabel("Slope", color="black")
    ax2.tick_params(axis="y", labelcolor="black")

    # Á¨¨‰∫åyËª∏„ÅÆÁØÑÂõ≤„ÇíË®≠ÂÆö
    ax1.set_ylim(-200, 400)
    ax2.set_ylim(-10, 50)

    # „Çø„Ç§„Éà„É´„Å®Âá°‰æã
    plt.title("TSLA Stock Price and Moving Averages")
    ax1.legend(loc="upper left")
    ax2.legend(loc="upper right")

    # Êó•‰ªò„Éï„Ç©„Éº„Éû„ÉÉ„Éà„ÅÆÂ§âÊõ¥ (YYYYMMDD)
    start_str = start.strftime("%Y%m%d")
    end_str = end.strftime("%Y%m%d")

    # „Éá„Ç£„É¨„ÇØ„Éà„É™„ÅÆ„Éë„Çπ
    directory = "runs"

    # „Éá„Ç£„É¨„ÇØ„Éà„É™„ÅåÂ≠òÂú®„Åó„Å™„ÅÑÂ†¥Âêà„ÅØ‰ΩúÊàê
    if not os.path.exists(directory):
        os.makedirs(directory)

    # „Éï„Ç°„Ç§„É´Âêç„ÇíË®≠ÂÆöÔºà„Éá„Ç£„É¨„ÇØ„Éà„É™„Éë„Çπ„ÇíÂê´„ÇÄÔºâ
    filename = f"{directory}/{ticker}_stock_price_{start_str}_to_{end_str}.png"
    plt.savefig(filename)
    plt.show()

    # ÊúÄÊñ∞„Åã„Çâ5Êó•ÂàÜ„ÅÆMA10„Å®MA50„ÅÆ„Éá„Éº„Çø„ÇíÂèñÂæó„Åó„ÄÅÊØîËºÉÁµêÊûú„ÇíÂá∫Âäõ
    latest_MA10 = df["MA10"].iloc[-5:]
    latest_MA50 = df["MA50"].iloc[-5:]
    latest_dates = df.index[-5:]

    print("Comparing latest 5 days of MA10 and MA50:")
    messages = [f"TSLA ({start_str} - {end_str})"]
    for i in range(5):
        date = latest_dates[i]
        ma10_value = latest_MA10.iloc[i]
        ma50_value = latest_MA50.iloc[i]
        comparison = (
            "‚≠êÔ∏è"
            if ma10_value > ma50_value
            else "‚ùé"
            if ma10_value < ma50_value
            else "üå•Ô∏è"
        )
        # print(
        #     f"Date: {date}, MA10: {ma10_value:.2f}, MA50: {ma50_value:.2f}, Diff: {ma10_value - ma50_value:.2f}, Comparison: {comparison}"
        # )
        messages.append(
            f"{date:%m/%d}, M10: {ma10_value:.1f}, M50: {ma50_value:.1f}, Diff: {ma10_value - ma50_value:.1f}, Res: {comparison}"
        )

    # LINE Notify„ÇíÈÄö„Åò„Å¶ÈÄöÁü•
    # line.send_line_notify(f"„ÉÜ„Çπ„É©„ÅÆÊ†™‰æ°„ÉÅ„É£„Éº„Éà ({start_str} - {end_str})", filename)
    line.send_line_notify(messages, filename)
    # line.send_line_notify_group(f"„ÉÜ„Çπ„É©„ÅÆÊ†™‰æ°„ÉÅ„É£„Éº„Éà ({start_str} - {end_str})", filename)


# ÊØéÊúù7ÊôÇ„Å´`job`Èñ¢Êï∞„ÇíÂÆüË°å„Åô„Çã„Çà„ÅÜ„Å´„Çπ„Ç±„Ç∏„É•„Éº„É´„ÇíË®≠ÂÆö
schedule.every().day.at("07:00").do(job)

while True:
    schedule.run_pending()
    time.sleep(1)
